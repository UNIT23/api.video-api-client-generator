{{>partial_header}}
import os  # noqa: F401
import re  # noqa: F401
import sys  # noqa: F401

from {{packageName}}.api_client import ApiClient
from {{packageName}}.endpoint import EndPoint as _EndPoint
from {{packageName}}.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from {{packageName}}.exceptions import ApiTypeError, ApiValueError
{{#imports}}
{{{import}}}
{{/imports}}


{{#operations}}
class {{classname}}(_EndPoint):

{{#operation}}
    def {{operationId}}(
            self,
{{#requiredParams}}
{{^defaultValue}}
            {{paramName}},
{{/defaultValue}}
{{/requiredParams}}
{{#requiredParams}}
{{#defaultValue}}
            {{paramName}}={{{defaultValue}}},
{{/defaultValue}}
{{/requiredParams}}
            **kwargs
        ):
            """{{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}  # noqa: E501

{{#notes}}
            {{{notes}}}  # noqa: E501
{{/notes}}
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.{{operationId}}({{#requiredParams}}{{^defaultValue}}{{paramName}}, {{/defaultValue}}{{/requiredParams}}{{#requiredParams}}{{#defaultValue}}{{paramName}}={{{defaultValue}}}, {{/defaultValue}}{{/requiredParams}}async_req=True)
            >>> result = thread.get()

{{#requiredParams}}
{{#-last}}
            Args:
{{/-last}}
{{/requiredParams}}
{{#requiredParams}}
{{^defaultValue}}
                {{paramName}} ({{dataType}}):{{#description}} {{{description}}}{{/description}}
{{/defaultValue}}
{{/requiredParams}}
{{#requiredParams}}
{{#defaultValue}}
                {{paramName}} ({{dataType}}):{{#description}} {{{description}}}.{{/description}} defaults to {{{defaultValue}}}, must be one of [{{{defaultValue}}}]
{{/defaultValue}}
{{/requiredParams}}

            Keyword Args:{{#optionalParams}}
                {{paramName}} ({{dataType}}):{{#description}} {{{description}}}.{{/description}} [optional]{{#defaultValue}} if omitted the server will use the default value of {{{defaultValue}}}{{/defaultValue}}{{/optionalParams}}
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                async_req (bool): execute request asynchronously

            Returns:
                {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
{{#requiredParams}}
            kwargs['{{paramName}}'] = \
                {{paramName}}
{{/requiredParams}}

            params_map = {
                'all': [
{{#allParams}}
                    '{{paramName}}',
{{/allParams}}
                    'async_req',
                    '_preload_content',
                    '_request_timeout',
                    '_return_http_data_only'
                ],
{{#requiredParams}}
{{#-first}}
                'required': [
{{/-first}}
                    '{{paramName}}',
{{#-last}}
                ],
{{/-last}}
{{/requiredParams}}
{{^requiredParams}}
                'required': [],
{{/requiredParams}}
                'nullable': [
{{#allParams}}
{{#isNullable}}
                    '{{paramName}}',
{{/isNullable}}
{{/allParams}}
                    '_request_timeout'
                ],
                'enum': [
{{#allParams}}
{{#isEnum}}
                    '{{paramName}}',
{{/isEnum}}
{{/allParams}}
                ],
                'validation': [
{{#allParams}}
{{#hasValidation}}
                    '{{paramName}}',
{{/hasValidation}}
{{/allParams}}
                ]
            }
            validations = {
{{#allParams}}
{{#hasValidation}}
                ('{{paramName}}',): {
{{#maxLength}}
                    'max_length': {{maxLength}},{{/maxLength}}{{#minLength}}
                    'min_length': {{minLength}},{{/minLength}}{{#maxItems}}
                    'max_items': {{maxItems}},{{/maxItems}}{{#minItems}}
                    'min_items': {{minItems}},{{/minItems}}{{#maximum}}
                    {{#exclusiveMaximum}}'exclusive_maximum'{{/exclusiveMaximum}}'inclusive_maximum'{{^exclusiveMaximum}}{{/exclusiveMaximum}}: {{maximum}},{{/maximum}}{{#minimum}}
                    {{#exclusiveMinimum}}'exclusive_minimum'{{/exclusiveMinimum}}'inclusive_minimum'{{^exclusiveMinimum}}{{/exclusiveMinimum}}: {{minimum}},{{/minimum}}{{#pattern}}
                    'regex': {
                        'pattern': r'{{{vendorExtensions.x-regex}}}',  # noqa: E501{{#vendorExtensions.x-modifiers}}
                        {{#-first}}'flags': (re.{{.}}{{/-first}}{{^-first}}          re.{{.}}{{/-first}}{{^-last}} | {{/-last}}{{#-last}}){{/-last}}{{/vendorExtensions.x-modifiers}}
                    },{{/pattern}}
                },
{{/hasValidation}}
{{/allParams}}
            }
            allowed_values = {
{{#allParams}}
{{#isEnum}}
                ('{{paramName}}',): {
{{#isNullable}}
                    'None': None,{{/isNullable}}{{#allowableValues}}{{#enumVars}}
                    "{{name}}": {{{value}}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
                },
{{/isEnum}}
{{/allParams}}
            }
            openapi_types = {
{{#allParams}}
                '{{paramName}}':
                    ({{{dataType}}},),
{{/allParams}}
                'async_req': (bool,),
                '_preload_content': (bool,),
                '_request_timeout': (none_type, int, (int,), [int]),
                '_return_http_data_only': (bool,)
            }
            attribute_map = {
{{#allParams}}
{{^isBodyParam}}
                '{{paramName}}': '{{baseName}}',
{{/isBodyParam}}
{{/allParams}}
            }
            location_map = {
{{#allParams}}
                '{{paramName}}': '{{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isCookieParam}}cookie{{/isCookieParam}}{{#isBodyParam}}body{{/isBodyParam}}',
{{/allParams}}
            }
            collection_format_map = {
{{#allParams}}
{{#collectionFormat}}
                '{{paramName}}': '{{collectionFormat}}',
{{/collectionFormat}}
{{/allParams}}
            }

            for key, value in kwargs.items():
                if key not in params_map['all']:
                    raise ApiTypeError(
                        "Got an unexpected parameter '%s'"
                        " to method `{{operationId}}`" %
                        (key, )
                    )
                if (key not in params_map['nullable'] and value is None):
                    raise ApiValueError(
                        "Value may not be None for non-nullable parameter `%s`"
                        " when calling `{{operationId}}`" %
                        (key, )
                    )

            for key in params_map['required']:
                if key not in kwargs.keys():
                    raise ApiValueError(
                        "Missing the required parameter `%s` when calling "
                        "`{{operationId}}`" % (key, )
                    )

            self._validate_inputs(kwargs, params_map, allowed_values, validations, openapi_types)
            params = self._gather_params(kwargs, location_map, attribute_map, openapi_types, collection_format_map)
{{#vendorExtensions.x-client-chunk-upload}}
            res = None
            for content_range, chunk in self._chunk_file(params['file']):
                res = self.api_client.call_api(
                    "{{{path}}}",
                    "{{httpMethod}}",
                    params['path'],
                    params['query'],
                    {**params['header'], 'Content-Range': content_range},
                    body=params['body'],
                    post_params=params['form'],
                    files=chunk,
                    response_type={{#returnType}}({{{returnType}}},){{/returnType}}{{^returnType}}None{{/returnType}},
                    async_req=kwargs['async_req'],
                    _return_http_data_only=kwargs['_return_http_data_only'],
                    _preload_content=kwargs['_preload_content'],
                    _request_timeout=kwargs['_request_timeout'],
                    collection_formats=params['collection_format'])
            return res  # return the last response
{{/vendorExtensions.x-client-chunk-upload}}
{{^vendorExtensions.x-client-chunk-upload}}
            return self.api_client.call_api(
                "{{{path}}}",
                "{{httpMethod}}",
                params['path'],
                params['query'],
                params['header'],
                body=params['body'],
                post_params=params['form'],
                files=params['file'],
                response_type={{#returnType}}({{{returnType}}},){{/returnType}}{{^returnType}}None{{/returnType}},
                async_req=kwargs['async_req'],
                _return_http_data_only=kwargs['_return_http_data_only'],
                _preload_content=kwargs['_preload_content'],
                _request_timeout=kwargs['_request_timeout'],
                collection_formats=params['collection_format'])
{{/vendorExtensions.x-client-chunk-upload}}

{{/operation}}
{{/operations}}
