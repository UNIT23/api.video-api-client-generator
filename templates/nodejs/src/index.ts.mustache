{{>licenseInfo}}

import HttpClient from "./HttpClient";
{{# apiInfo.apis }}{{^x-client-hidden}}
import {{classFilename}} from './api/{{classFilename}}';{{/x-client-hidden}}{{/ apiInfo.apis }}

const PRODUCTION_BASE_URI = "https://ws.api.video";
const DEFAULT_CHUNK_SIZE = {{ defaultChunkSize }};
const MIN_CHUNK_SIZE = {{ minChunkSize }};
const MAX_CHUNK_SIZE = {{ maxChunkSize }};

class ApiVideoClient {
  private httpClient: HttpClient;{{# apiInfo.apis }}{{^x-client-hidden}}
  private _{{classVarName}}: {{classFilename}};{{/x-client-hidden}}{{/ apiInfo.apis }}

  constructor(params: {apiKey?: string, baseUri?: string, chunkSize?: number, applicationName?: string}) {
    if(params.chunkSize && (params.chunkSize < MIN_CHUNK_SIZE || params.chunkSize > MAX_CHUNK_SIZE)) {
      throw new Error("Invalid chunk size value. Must be greater than " + MIN_CHUNK_SIZE + " bytes and lower than " + MAX_CHUNK_SIZE + " bytes.");
    }
    if (params.applicationName && !/^[\w-\/\.]{1,50}$/.test(params.applicationName)) {
      throw new Error("Invalid application name. Allowed characters: A-Z, a-z, 0-9, '-', '_', '/'. Max length: 50.")
    }
    this.httpClient = new HttpClient({
      ...params,
      baseUri: params.baseUri || PRODUCTION_BASE_URI,
      chunkSize: params.chunkSize || DEFAULT_CHUNK_SIZE,
    })
{{# apiInfo.apis }}{{^x-client-hidden}}
    this._{{classVarName}} = new {{classFilename}}(this.httpClient);{{/x-client-hidden}}{{/ apiInfo.apis }}
  }

  public async getAccessToken() {
    return this.httpClient.getAccessToken();
  }

{{# apiInfo.apis }}{{^x-client-hidden}}
  /**
  * Get an {{classFilename}} instance
  * @return {{classFilename}}
  */
  public get {{classVarName}}(): {{classFilename}} {
    return this._{{classVarName}};
  }
{{/x-client-hidden}}{{/ apiInfo.apis }}
}

export = ApiVideoClient;