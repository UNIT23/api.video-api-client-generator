<?php declare(strict_types = 1);

namespace ApiVideo\Client;

use ApiVideo\Client\Service\ServiceInterface;
use ApiVideo\Client\Service\VideoService;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\StreamFactoryInterface;

const MIN_CHUNK_SIZE = {{ minChunkSize }};
const MAX_CHUNK_SIZE = {{ maxChunkSize }};
const DEFAULT_CHUNK_SIZE = {{ defaultChunkSize }};

/**
 * Api.video client
 */
class Client
{
    /**
     * @var BaseClient
     */
    private $baseClient;

    /**
     * @var ServiceInterface[]
     */
    private $services = [];

    /**
     * @param string                       $baseUri
     * @param string|null                  $apiKey
     * @param ClientInterface              $httpClient
     * @param RequestFactoryInterface|null $requestFactory
     * @param StreamFactoryInterface|null  $streamFactory
     * @param int|null                     $chunkSize
     */
    public function __construct(string $baseUri, ?string $apiKey, ClientInterface $httpClient, ?RequestFactoryInterface $requestFactory = null, ?StreamFactoryInterface $streamFactory = null, ?int $chunkSize = DEFAULT_CHUNK_SIZE)
    {
        if ($httpClient instanceof RequestFactoryInterface) {
            $requestFactory = $httpClient;
        }

        if ($httpClient instanceof StreamFactoryInterface) {
            $streamFactory = $httpClient;
        }

        if($chunkSize < MIN_CHUNK_SIZE || $chunkSize > MAX_CHUNK_SIZE) {
            throw new \InvalidArgumentException('Invalid chunk size value. Must be greater than $MIN_CHUNK_SIZE bytes and lower than $MAX_CHUNK_SIZE bytes.');
        }

        $this->baseClient = new BaseClient($baseUri, $apiKey, $httpClient, $requestFactory, $streamFactory, $chunkSize);
    }

    /**
     * @param string $applicationName the application name. Allowed characters: A-Z, a-z, 0-9, -, _, /. Max length: 50.
     */
    public function setApplicationName(string $applicationName)
    {
        $this->baseClient->setApplicationName($applicationName);
    }

    {{#apiInfo}}{{#apis}}
    /**
     * @return \{{invokerPackage}}\Api\{{classname}}
     */
    public function {{classVarName}}(): \{{invokerPackage}}\Api\{{classname}}
    {
        if (!array_key_exists('{{classVarName}}', $this->services)) {
            $this->services['{{classVarName}}'] = new \{{invokerPackage}}\Api\{{classname}}($this->baseClient);
        }

        return $this->services['{{classVarName}}'];
    }
    {{/apis}}{{/apiInfo}}
}
