[![badge](https://img.shields.io/twitter/follow/api_video?style=social)](https://twitter.com/intent/follow?screen_name=api_video) &nbsp; [![badge](https://img.shields.io/github/stars/apivideo/{{gitRepoId}}?style=social)]({{artifactUrl}}) &nbsp; [![badge](https://img.shields.io/discourse/topics?server=https%3A%2F%2Fcommunity.api.video)](https://community.api.video)
![](https://github.com/apivideo/.github/blob/main/assets/apivideo_banner.png)
<h1 align="center">api.video {{#android}}Android{{/android}}{{^android}}Java{{/android}} {{userAgent}}</h1>

[api.video](https://api.video) is the video infrastructure for product builders. Lightning fast video APIs for integrating, scaling, and managing on-demand & low latency live streaming features in your app.

# Table of contents

- [Project description](#project-description)
- [Getting started](#getting-started)
  - [Requirements](#requirements)
  - [Installation](#installation)
    - [Maven users](#maven-users)
    - [Gradle users](#gradle-users)
    - [Others](#others)
  - [Code sample](#code-sample)
  {{#android}}
  - [Upload options](#upload-options)
  - [Permissions](#permissions)
  {{/android}}
- [Documentation](#documentation)
  - [API Endpoints](#api-endpoints){{#apiInfo}}{{#apis}}{{^x-client-hidden}}    - [{{classname}}](#{{#lower}}{{classname}}{{/lower}}){{/x-client-hidden}}
{{/apis}}{{/apiInfo}}  - [Models](#models)
  - [Authorization](#documentation-for-authorization)
    - [API key](#api-key)
    - [Public endpoints](#public-endpoints)
  - [Recommendation](#recommendation)
- [Have you gotten use from this API client?](#have-you-gotten-use-from-this-api-client-)
- [Contribution](#contribution)

# Project description

api.video's {{#android}}Android{{/android}}{{^android}}Java{{/android}} {{userAgent}} streamlines the coding process. Chunking files is handled for you, as is pagination and refreshing your tokens.

# Getting started

## Requirements

Building the API client library requires:
1. Java {{#supportJava6}}1.6{{/supportJava6}}{{^supportJava6}}{{#java8}}1.8{{/java8}}{{^java8}}1.7{{/java8}}{{/supportJava6}}+
2. Maven/Gradle

## Installation

### Maven users

Add this dependency to your project's POM:

```xml
<dependency>
  <groupId>{{{groupId}}}</groupId>
  <artifactId>{{{artifactId}}}</artifactId>
  <version>{{{artifactVersion}}}</version>
  <scope>compile</scope>
</dependency>
```

### Gradle users

Add this dependency to your project's build file:

```groovy
implementation "{{{groupId}}}:{{{artifactId}}}:{{{artifactVersion}}}"
```

### Others

At first generate the JAR by executing:

```shell
mvn clean package
```

Then manually install the following JARs:

* `target/{{{artifactId}}}-{{{artifactVersion}}}.jar`
* `target/lib/*.jar`

## Code sample

Please follow the [installation](#installation) instruction and execute the following {{#android}}Kotlin{{/android}}{{^android}}Java{{/android}} code:

{{#client}}
{{^android}}
```java
{{#apiInfo}}{{#apis}}{{#-first}}{{#operations}}{{#operation}}{{#-first}}
import video.api.client.ApiVideoClient;
import {{{invokerPackage}}}.ApiException;
import {{{invokerPackage}}}.models.*;

public class Example {
  public static void main(String[] args) {
    ApiVideoClient apiVideoClient = new ApiVideoClient("YOUR_API_KEY");
    // if you rather like to use the sandbox environment:
    // ApiVideoClient apiVideoClient = new ApiVideoClient("YOU_SANDBOX_API_KEY", Environment.SANDBOX);

    File myVideoFile = new File("my-video.mp4");

    try {
        Video video = apiVideoClient.videos().create(new VideoCreationPayload().title("my video"));
        video = apiVideoClient.videos().upload(video.getVideoId(), myVideoFile);
        System.out.println(video);
    } catch (ApiException e) {
        System.err.println("Exception when calling AccountApi#get");
        System.err.println("Status code: " + e.getCode());
        System.err.println("Reason: " + e.getMessage());
        System.err.println("Response headers: " + e.getResponseHeaders());
        e.printStackTrace();
    }
  }
}
{{/-first}}{{/operation}}{{/operations}}{{/-first}}{{/apis}}{{/apiInfo}}
```
{{/android}}
{{#android}}
```kotlin
{{#apiInfo}}{{#apis}}{{#-first}}{{#operations}}{{#operation}}{{#-first}}
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import video.api.client.ApiVideoClient
import {{{invokerPackage}}}.ApiException
import {{{invokerPackage}}}.models.*
import java.io.File
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : AppCompatActivity() {
    private val executor: ExecutorService = Executors.newSingleThreadExecutor()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
    }

    override fun onResume() {
        super.onResume()

        val apiVideoClient = ApiVideoClient("YOUR_API_KEY")
        // if you rather like to use the sandbox environment:
        // val apiVideoClient = ApiVideoClient("YOU_SANDBOX_API_KEY", Environment.SANDBOX)

        val myVideoFile = File("my-video.mp4")

        /**
         * Notice: you must not call API from the UI/main thread. Dispatch with Thread, Executors or Kotlin coroutines.
         */
        executor.execute {
            try {
                var video = apiVideoClient.videos().create(VideoCreationPayload().title("my video"))
                video = apiVideoClient.videos().upload(video.videoId, myVideoFile)
                Log.i("Example", "$video")
            } catch (e: ApiException) {
                Log.e("Example", "Exception when calling VideoApi")
                e.message?.let {
                    Log.e("Example", "Reason: ${it}")
                }
            }
        }
    }
}
{{/-first}}{{/operation}}{{/operations}}{{/-first}}{{/apis}}{{/apiInfo}}
```
{{/android}}
{{/client}}
{{#uploader}}
{{#android}}
```kotlin
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import {{{invokerPackage}}}.ApiException
import {{{invokerPackage}}}.models.*
import java.io.File
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : AppCompatActivity() {
    private val executor: ExecutorService = Executors.newSingleThreadExecutor()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
    }

    override fun onResume() {
        super.onResume()
        
        // If you want to upload a video with an upload token (uploadWithUploadToken):
        val videoApi = VideosApi()
        // if you rather like to use the sandbox environment:
        // val videoApi = VideosApi(Environment.SANDBOX)
        // If you rather like to upload with your "YOUR_API_KEY" (upload)
        // val videoApi = VideosApi("YOUR_API_KEY", Environment.PRODUCTION.basePath)
        // if you rather like to use the sandbox environment:
        // val videoApi = VideosApi("YOUR_API_KEY", Environment.SANDBOX.basePath)

        
        val myVideoFile = File("my-video.mp4")

        /**
         * Notice: you must not call API from the UI/main thread. Dispatch with Thread, Executors or Kotlin coroutines.
         * Alternatively, most APIs comes with an asynchronous counterpart (`createAsync` for `create`) except for the upload endpoint.
         *
         * To simplify upload, see [Upload options](#upload-options)
         */
        executor.execute {
            try {
                video = videoApi.uploadWithUploadToken("MY_VIDEO_TOKEN", myVideoFile)
                // if your rather like to use your API key:
                // video = videoApi.upload("MY_VIDEO_ID", myVideoFile)
                Log.i("Example", "$video")
            } catch (e: ApiException) {
                Log.e("Example", "Exception when calling VideoApi")
                e.message?.let {
                    Log.e("Example", "Reason: ${it}")
                }
            }
        }
    }
}

```
{{/android}}
{{/uploader}}

{{#android}}
### Example

Examples that demonstrate how to use the API is provided in folder `examples/`.

## Upload options

To upload a video, you have 3 differents options:
* WorkManager: preferred option: Upload with Android WorkManager API. It supports progress notifications. Directly use, WorkManager extensions. See [example](examples/workmanager) for more details.
* UploadService: Upload with an Android Service. It supports progress notifications. You have to extend the `UploadService` and register it in your `AndroidManifest.xml`. See [example](examples/service) for more details.
* Direct call with `ApiClient`: Do not call API from the main thread, otherwise you will get a android.os.NetworkOnMainThreadException. Dispatch API calls with Thread, Executors or Kotlin coroutine to avoid this.

## Permissions

You have to add the following permissions in your `AndroidManifest.xml`:

```xml
    <uses-permission android:name="android.permission.INTERNET" />
<!-- Application requires android.permission.READ_EXTERNAL_STORAGE to upload videos` -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
``` 

Your application also has to dynamically request the `android.permission.READ_EXTERNAL_STORAGE` permission to upload videos.
{{/android}}

# Documentation

## API Endpoints

All URIs are relative to *{{basePath}}*

{{#apiInfo}}
{{#apis}}
{{^x-client-hidden}}

### {{classname}}


#### Retrieve an instance of {{classname}}:
{{^android}}
```java
ApiVideoClient client = new ApiVideoClient("YOUR_API_KEY");
{{classname}} {{classVarName}} = client.{{classVarName}}()
```
{{/android}}
{{#android}}
{{#client}}
```kotlin
val client = ApiVideoClient("YOUR_API_KEY")
val {{classVarName}} = client.{{classVarName}}()
```
{{/client}}
{{#uploader}}
```kotlin
val videosApi = VideosApi("YOUR_API_KEY", Environment.PRODUCTION)
```
{{/uploader}}
{{/android}}



#### Endpoints

Method | HTTP request | Description
------------- | ------------- | -------------
{{#operations}}{{#operation}}{{#isDeprecated}}**(deprecated)** {{/isDeprecated}}[**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}
{{/x-client-hidden}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{#models}}{{#model}} - [{{classname}}]({{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}

## Documentation for Authorization

### API key

Most endpoints required to be authenticated using the API key mechanism described in our [documentation](https://docs.api.video/reference#authentication).
The access token generation mechanism is automatically handled by the client. All you have to do is provide an API key when instantiating the {{#client}}`ApiVideoClient`{{/client}}{{^client}}`ApiClient`{{/client}}:
{{^android}}
```java
ApiVideoClient client = new ApiVideoClient("YOUR_API_KEY");
```
{{/android}}
{{#android}}
{{#client}}
```kotlin
val client = ApiVideoClient("YOUR_API_KEY")
```
{{/client}}
{{#uploader}}
```kotlin
val videosApi = VideosApi("YOUR_API_KEY", Environment.PRODUCTION)
```
{{/uploader}}
{{/android}}

### Public endpoints

Some endpoints don't require authentication. These one can be called with a client instantiated without API key:
{{^android}}
```java
ApiVideoClient client = new ApiVideoClient();
```
{{/android}}
{{#android}}
{{#client}}
```kotlin
val client = ApiVideoClient()
```
{{/client}}
{{#uploader}}
```kotlin
val videosApi = VideosApi()
```
{{/uploader}}
{{/android}}

## Recommendation

It's recommended to create an instance of `ApiClient` per thread in a multithreaded environment to avoid any potential issues.
{{#android}}
For direct call with `ApiClient`: Do not call API from the main thread, otherwise you will get a `android.os.NetworkOnMainThreadException`. Dispatch API calls with Thread, Executors or Kotlin coroutine to avoid this. Alternatively, APIs come with an asynchronous counterpart (`createAsync` for `create`) except for the upload endpoint.
{{/android}}

## Have you gotten use from this API client?

Please take a moment to leave a star on the client ⭐

This helps other users to find the clients and also helps us understand which clients are most popular. Thank you!

# Contribution

Since this API client is generated from an OpenAPI description, we cannot accept pull requests made directly to the repository. If you want to contribute, you can open a pull request on the repository of our [client generator](https://github.com/apivideo/api-client-generator). Otherwise, you can also simply open an issue detailing your need on this repository.